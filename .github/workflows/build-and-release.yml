name: Build and Release Deb File

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Make usr/bin executeable
        run: chmod +x usr/bin/*

      - name: Check if commit starts with "[nodeb]"
        run: |
          commit_message=$(git log --format=%B -n 1 $GITHUB_SHA)
          if [[ "$commit_message" =~ ^\[nodeb\] ]]; then
            echo "Commit starts with [nodeb]. Skipping further steps."
            exit 0
          fi

      - name: Check if dependencies are cached
        id: check_cache
        uses: actions/cache@v2
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apt.txt') }}

      - name: Install dependencies
        if: steps.check_cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential # Example dependency
          sudo apt-get install -y debhelper # Example dependency
          # Add more dependencies if needed

      - name: Cache dependencies
        if: steps.check_cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/apt.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-
            ${{ runner.os }}-

      - name: Build deb file
        run: |
          dpkg-deb --build . your-deb-file.deb

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_KEY }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload deb file to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_KEY }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./your-deb-file.deb
          asset_name: uploadfile.deb
          asset_content_type: application/octet-stream
